require 'nn';

model = nn.Sequential()
model:add(nn.SpatialConvolution(1,8,71,1,4,1,35,0))
--model:add(nn.SpatialBatchNormalization(6,nil,nil,false))
--model:add(nn.SpatialBatchNormalization(8))
model:add(nn.ReLU())
model:add(nn.SpatialMaxPooling(2,1,2,1))

model:add(nn.SpatialConvolution(8,16,5,1,2,1,2,0))
--model:add(nn.SpatialBatchNormalization(16,nil,nil,false))
--model:add(nn.SpatialBatchNormalization(16))
model:add(nn.ReLU())
--model:add(nn.SpatialConvolution(16,16,3,1,1,1,1,0))
--model:add(nn.SpatialBatchNormalization(16,nil,nil,false))
--model:add(nn.SpatialBatchNormalization(16))
--model:add(nn.ReLU())
model:add(nn.SpatialMaxPooling(2,1,2,1))

model:add(nn.SpatialConvolution(16,32,3,1,1,1,1,0))
--model:add(nn.SpatialBatchNormalization(16,nil,nil,false))
--model:add(nn.SpatialBatchNormalization(32))
model:add(nn.ReLU())
--model:add(nn.SpatialConvolution(50,50,3,1,1,1,1,0))
--model:add(nn.SpatialBatchNormalization(16,nil,nil,false))
--model:add(nn.SpatialBatchNormalization(50))
--model:add(nn.ReLU())
--model:add(nn.SpatialConvolution(50,16,3,1,1,1,1,0))
--model:add(nn.SpatialBatchNormalization(16,nil,nil,false))
--model:add(nn.SpatialBatchNormalization(16))
--model:add(nn.ReLU())
model:add(nn.SpatialMaxPooling(2,1,2,1))

model:add(nn.SpatialConvolution(32,25,1,9,1,1))
--model:add(nn.SpatialBatchNormalization(64))
model:add(nn.ReLU())

model:add(nn.View(-1):setNumInputDims(3))
--model:add(nn.Dropout(0.5))
--model:add(nn.Linear(1152,8))
model:add(nn.Linear(100,32))
--model:add(nn.BatchNormalization(64,nil,nil,false))
model:add(nn.BatchNormalization(32))
model:add(nn.ReLU())
model:add(nn.Linear(32,16))
--model:add(nn.BatchNormalization(64,nil,nil,false))
model:add(nn.BatchNormalization(16))
model:add(nn.ReLU())
model:add(nn.Linear(16,8))
--model:add(nn.BatchNormalization(64,nil,nil,false))
model:add(nn.BatchNormalization(8))
model:add(nn.ReLU())
model:add(nn.Linear(8,4))
model:add(nn.LogSoftMax())
return model;